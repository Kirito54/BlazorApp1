@page "/search"

@inject HttpClient Http
@using BlazorApp1.Client.Models
<p>Общее количество заявлений в очереди: @TotalCount</p>
<div class="card p-4 mb-4">
    <div class="mb-3">
        <label class="form-label">Номер распоряжения</label>
        <input class="form-control" @bind="OrderNumber" />
    </div>
    <div class="mb-3">
        <label class="form-label">Номер МФЦ</label>
        <input class="form-control" @bind="MfcNumber" />
    </div>
    <button class="btn btn-primary" @onclick="SearchAsync">Найти</button>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-warning">@ErrorMessage</div>
}

@if (Results?.Any() == true)
{
    <div class="card p-4 mt-4">    
    <table class="table">
        <thead>
            <tr>
                <th>Номер очереди</th>
                <th>Номер МФЦ</th>
                <th>Дата заявления</th>
                <th>Номер распоряжения</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Results)
            {
                <tr>
                    <td>@item.QueueNumber</td>
                    <td>@item.MfcNumber</td>
                    <td>@item.ApplicationDate</td>
                    <td>@item.OrderNumber</td>
                </tr>
            }
        </tbody>
    </table>
    </div>
}

@if (ShowDateDialog)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Выберите дату</h5>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var item in DateOptions)
                        {
                            <li class="list-group-item">
                                <button class="btn btn-link" @onclick="() => SelectDate(item)">@item</button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string OrderNumber { get; set; } = string.Empty;
    private string MfcNumber { get; set; } = string.Empty;
    private List<QueueInfo>? Results;
    private int TotalCount;

    private string ErrorMessage { get; set; } = string.Empty;

    private bool ShowDateDialog;
    private List<string> DateOptions = new();

    private async Task SearchAsync()
    {
        ErrorMessage = string.Empty;
        if (string.IsNullOrWhiteSpace(OrderNumber) && string.IsNullOrWhiteSpace(MfcNumber))
        {
            ErrorMessage = "Введите номер распоряжения или МФЦ";
            return;
        }
        var url = "api/search?";
        if (!string.IsNullOrWhiteSpace(OrderNumber))
            url += $"orderNumber={Uri.EscapeDataString(OrderNumber)}";
        if (!string.IsNullOrWhiteSpace(MfcNumber))
        {
            if (!url.EndsWith("?")) url += "&";
            url += $"mfcNumber={Uri.EscapeDataString(MfcNumber)}";
        }
        try
        {
            var response = await Http.GetFromJsonAsync<SearchResponse>(url);
            Results = response?.Records;
            TotalCount = response?.TotalCount ?? 0;
            if (Results == null || Results.Count == 0)
            {
                ErrorMessage = "Ничего не найдено";
            }
            var dates = Results?.Select(r => r.ApplicationDate).Distinct().ToList();
            if (dates != null && dates.Count > 1)
            {
                DateOptions = dates;
                ShowDateDialog = true;
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = $"Ошибка запроса: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Не удалось выполнить поиск: {ex.Message}";
        }
    }

    private void SelectDate(string date)
    {
        Results = Results?.Where(r => r.ApplicationDate == date).ToList();
        ShowDateDialog = false;
        StateHasChanged();
    }
}
